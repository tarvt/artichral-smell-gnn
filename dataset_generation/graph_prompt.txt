Generate a detailed JSON representation of a microservices architecture with a specified number of microservices (n). This data must detail the microservices' roles, interactions, and anti-patterns and be formatted precisely in JSON for automated processing.

Instructions:
Node Specifications:

Quantity: Create n nodes, each representing a unique microservice with specific roles and characteristics.
Details Required for Each Microservice:
Node Features (x): Each node should have a feature vector of length 10, reflecting the following attributes:
[0]: Is the microservice a Core Microservice? (1 for yes, 0 for no)
[1]: Is the microservice dedicated to Database and Storage? (1 for yes, 0 for no)
[2]: Is the microservice an Infrastructure Microservice?
[3]: Is the microservice a Supportive Service?
[4]: Does the microservice handle External Interfaces?
[5]: Instance Count (numerical value)
[6]: Number of Dependencies (numerical value)
[7-9]: Reserved for additional future use.

Edge Specifications:

edge_index:
The edge_index array must always have two rows: the first row for source nodes and the second for target nodes, ensuring that each edge is represented by a pair of integers. This structure [2 x num_edges] is crucial for graph-based processing.

Create Directed Edges: Form directed edges between nodes to represent API calls or data queries, which are critical for analyzing service interactions and dependencies.
edge_attr:
[0]: Latency (milliseconds)
[1]: Bytes Transmitted
[2]: Bytes Received
Anti-Pattern Labels:

Assign binary labels to each node based on the presence of specific anti-patterns:
[0]: ESB Usage – Nodes excessively relying on an Enterprise Service Bus for simple tasks.
[1]: Cyclic Dependency – Nodes that are part of a cyclic chain of calls.
[2]: Inappropriate Service Intimacy – Nodes excessively interacting with or relying on another service’s private data.
[3]: Microservice Greedy – Nodes representing services created for minimal functionalities.

Detailed guidance on when to apply specific anti-pattern labels to nodes in a microservices architecture, emphasizing not only the situations where these patterns are considered architectural smells but also the contexts in which they may be justified or mitigated:

1. **ESB Usage**:
   - **Label**: Apply if a service excessively relies on an Enterprise Service Bus (ESB) for operations that could be more efficiently handled through direct service-to-service communications.
   - **Justification**: In some architectures, an ESB may be strategically used to integrate legacy systems that cannot be easily modified or replaced. While generally a smell, if the ESB usage is part of a phased approach to modernization, it may not immediately indicate a problem.

2. **Cyclic Dependency**:
   - **Label**: This label should be applied to services that are part of a cyclic chain of calls leading to tight coupling, increased complexity, and potential maintenance and scaling issues.
   - **Contextual Acceptance**:
     - **Functional Requirements**: If a cyclic dependency arises from specific business logic that necessitates mutual interaction (e.g., a payment service and order service in an event-driven setup), and is well-managed, it might not be considered a smell.
     - **Service Interface Level**: Cycles might exist at the API level without affecting the core logic, such as in facade patterns where services decouple the underlying business logic from the interfaces.
     - **Orchestration-Driven Architectures**: In orchestrated setups, cycles might be part of necessary workflow management and, if well-documented and understood, may not constitute a smell.
     - **Event-Based Systems**: Cycles in event-driven systems may facilitate data consistency and are acceptable if they avoid infinite loops and manage event propagation effectively.

3. **Inappropriate Service Intimacy**:
   - **Label**: Apply when a service interacts too closely with another, such as accessing its private data or relying heavily on its internal workings, which could lead to issues if the service changes.
   - **Justification**: In some domain-driven designs, services within the same bounded context may need to be intimately connected to perform their functions effectively, which may justify closer interactions than typically recommended.

4. **Microservice Greedy**:
   - **Label**: This label is for services that are created to perform minimal functions, possibly leading to an unnecessary proliferation of services and increasing the complexity of the system.
   - **Contextual Acceptance**:
     - **Specialized Functions**: In some cases, splitting a service into smaller, highly specialized components may be justified by security requirements, specific scalability needs, or compliance reasons.

Output Format:
Ensure the output adheres strictly to JSON format, suitable for data parsing and processing. This format should exclude any non-JSON compliant elements such as inline comments.
Descriptions and explanations should be confined to a "description" field within the JSON object, separate from structural data fields.
Example Required Output (Strict JSON Format):

{
  "Nodes": [
    [1, 0, 0, 0, 1, 5, 3, 0, 0, 0],
    [0, 1, 0, 0, 0, 2, 5, 0, 0, 0],
    [0, 0, 1, 0, 0, 1, 2, 0, 0, 0]
  ],
  "edge_index": [
    [1, 1, 2],
    [0, 2, 1]
  ],
  "edge_attr": [
    [10, 1000, 2000],
    [15, 1500, 2500],
    [5, 500, 1000]
  ],
  "labels": [
    [0, 0, 1, 0],
    [1, 0, 0, 0],
    [0, 1, 0, 0]
  ],
  "description": "This JSON object provides a detailed representation of a microservices architecture, outlining the roles, interactions, and identified anti-patterns for each microservice."
}

Additional Guidance:
Descriptions provided in the JSON object should not interfere with the data structure essential for parsing and analysis.
Adherence to JSON syntax is crucial for ensuring compatibility with parsing and processing tools and should be strictly followed to avoid issues during data ingestion and analysis.